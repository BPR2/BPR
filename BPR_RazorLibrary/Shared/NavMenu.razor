@using Microsoft.AspNetCore.Components.Authorization
@using BPR_RazorLibrary.Models.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject Blazored.LocalStorage.ILocalStorageService localStorage

    <nav class="navbar navbar-expand-lg navbar-light">
        <div class="container-fluid">
            <a href="#">
                <img class=" navbar-logo" src="https://www.fasterholt.dk/images/fasterholt-logo.jpg" />
            </a>

            <button class="navbar-toggler collapsed d-flex d-lg-none flex-column justify-content-around" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="toggler-icon top-bar"></span>
                <span class="toggler-icon middle-bar"></span>
                <span class="toggler-icon bottom-bar"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" @onclick="PerformLogout" href="/">Logout</a>
                    </li> 
                    
                    <AuthorizeView Policy="Admin">
                        <li class="nav-item">
                            <a class="nav-link" href="createUser">create account</a>
                        </li>                    
                    </AuthorizeView>

                    <AuthorizeView Policy="User">
                        <li class="nav-item">
                            <a class="nav-link" href="fields">Fields</a>
                        </li>
                    </AuthorizeView>
            </ul>
            </div>
        </div>
    </nav>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    public async Task PerformLogout()
    {
        try
        {
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
            await localStorage.ClearAsync();
        }
        catch (Exception e) { }
    }
}


