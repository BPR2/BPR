@page "/fields"
@using BPR_RazorLibrary.Services.Charts
@using BPR_RazorLibrary.Services.Fields;
@using BPR_RazorLibrary.Services.Users;
@using BPR_RazorLibrary.Models;
@using Microsoft.JSInterop
@inject IFieldService FieldService;
@inject IUserService UserService;
@inject IChartService ChartService;
@inject IJSRuntime JSRuntime;
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .container, .card {
        margin-top: 10px;
    }

    .map {
        height: 200px !important;
    }

    ul {
        list-style-type: none;
    }

    .btn-outline-info {
        border-radius: 60px !important;
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
        margin-top: 1rem;
    }

    .btn-light {
        background-color: #1565a2 !important;
        color: white !important;
        border-radius: 20px !important;
    }

        .btn-light:hover {
            background-color: #70a94c !important;
        }

    .card {
        border-radius: 20px !important;
    }

    h5 .fa-solid {
        margin-top: 10px;
    }
</style>

<div class="container justify-content-center">

    @if (fields.Any())
    {
        @foreach (var field in fields)
        {
            <div class="card">
                <button type="button" class="btn btn-light" data-bs-toggle="collapse" data-bs-target="#field_@field.Id" onclick="expandCollapse(this); getMap(@field.Receiver.ReceiverLatestData.Longitude, @field.Receiver.ReceiverLatestData.Latitude);">
                    <i class="fa-solid fa-wheat-awn"></i> <span> @field.Name <i class="fa-solid fa-angle-down"></i></span>
                </button>
                <div class="card-body collapse" id="field_@field.Id">
                    <div class="row">
                        <div class=" fields col-md-6">
                            <h5><i class="fa-solid fa-leaf"></i> PAW level limit: @field.PawLevelLimit %</h5>
                            <h5><i class="fa-solid fa-tower-cell"></i> Receiver Serial Number: @field?.Receiver.SerialNumber</h5>
                            @switch (@field?.Receiver.TimeInterval)
                            {
                                case 7200:
                                    <h5><i class="fa-solid fa-clock"></i> Last update: @field?.Receiver.ReceiverLatestData.Timestamp.ToLocalTime()   (Every 2 hours)</h5>
                                    break;
                                case 21600:
                                    <h5><i class="fa-solid fa-clock"></i> Last update: @field?.Receiver.ReceiverLatestData.Timestamp.ToLocalTime()   (Every 6 hours)</h5>
                                    break;
                                case 43200:
                                    <h5><i class="fa-solid fa-clock"></i> Last update: @field?.Receiver.ReceiverLatestData.Timestamp.ToLocalTime()   (Every 12 hours)</h5>
                                    break;
                                case 86400:
                                    <h5><i class="fa-solid fa-clock"></i> Last update: @field?.Receiver.ReceiverLatestData.Timestamp.ToLocalTime()   (Every 24 hours)</h5>
                                    break;
                            }
                            <h5><i class="fa-solid fa-battery-three-quarters"></i> Estimated Receiver Battery: @CalculateBattery((int)@field?.Receiver.LeftTransmission, (int) @field?.Receiver.MaxTransmission, (int)@field?.Receiver.TimeInterval)</h5>
                            <h5><i class="fa-solid fa-tower-broadcast"></i> Sensors:</h5>

                            <ul>
                                @foreach (var s in field?.Receiver?.Sensors)
                                {
                                    string IsBatteryLow;
                                    @if (s.BatteryLow)
                                    { IsBatteryLow = "Yes"; }
                                    else { IsBatteryLow = "No"; }
                                    <li>
                                        <button class="btn btn-outline-info" type="button" data-bs-toggle="collapse" data-bs-target="#sensor_@s.SensorId" aria-expanded="false" aria-controls="collapseExample" onclick="expandCollapse(this)">
                                            <i class="fa-solid fa-tower-broadcast"></i> <span>@s.TagNumber<i class="fa-solid fa-angle-down"></i></span>
                                        </button>
                                        <ul class="collapse" id="sensor_@s.SensorId">
                                            <li>
                                                <i class="fa-solid fa-tag"></i> Tag number: @s.TagNumber
                                            </li>
                                            <li>
                                                <i class="fa-solid fa-temperature-high"></i> latest Temperature: @s?.LatestSensorMeasurement?.Temperature
                                            </li>
                                            <li>
                                                <i class="fa-solid fa-droplet"></i> latest Humidity: @s?.LatestSensorMeasurement?.Humidity %
                                            </li>
                                            <li>
                                                <i class="fa-solid fa-battery-empty"></i> Battery low: @IsBatteryLow
                                            </li>
                                            <li>
                                                <i class="fa-solid fa-align-left"></i> Description:
                                                <p>@s.Description</p>
                                            </li>
                                        </ul>
                                    </li>
                                }
                            </ul>
                        </div>
                        <div class="col-md-6">
                            <div id="map" class="card map">
                            </div>
                            <div>
                                <h6><i class="fa-solid fa-align-left"></i> Description:</h6>

                                <div class="input-group">
                                    <textarea class="form-control" disabled>@field.Description</textarea>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button type="button" style="margin-top:5px;" class="btn btn-primary" @onclick=" () => navigateToEditField(field)">Edit</button>
                    <button type="button" style="margin-top:5px;" class="btn btn-info" @onclick=" () => NavigateToChartPage(field)"><i class="fa-solid fa-chart-line"></i> Chart</button>
                </div>
            </div>
        }

    }
    else
    {
        <div class="card">
            <div class="card-body">
                <div class="text-center">
                    <div class="spinner-border col-md-12" style="width: 2rem; height: 2rem;" role="status"><i class="fa-solid fa-wheat-awn"></i></div>
                </div>
            </div>
        </div>
    }

</div>

@code {
    private int userId;
    private List<Field> fields = new List<Field>();

    protected override async Task OnInitializedAsync()
    {
        userId = UserService.GetUserId();

        try
        {
            fields = await FieldService.GetAllFieldsByUserId(userId);

            if (fields.Count > 0) //only cache the field data if we managed to get anything
            {
                await localStorage.SetItemAsync("FieldList", fields);
            }

            var now = DateTime.Now;
            var weekAgo = DateTime.Now.AddDays(-7); //because we want to cache a week worth of measurement data

            DateTime? cacheDate = await localStorage.GetItemAsync<DateTime?>("CacheDate");

            double cacheAge = 0;

            if (cacheDate != null)
                cacheAge = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalDays;

            if (cacheDate == null || cacheAge >= 1) //if we don't have a cachedate or if the cache is more than a day old
            {
                //caching all the chart measurements as this is the only place we already have a collection of all the user's fields
                foreach (var field in fields)
                {
                    var fieldMeasurements = await ChartService.GetAllChartDataByFieldId(field.Id, weekAgo, now);
                    await localStorage.SetItemAsync("Field" + field.Id, fieldMeasurements);
                    await localStorage.SetItemAsync("CacheDate", now);
                }
            }            
        }
        catch (Exception e)
        {
            //we are here if we can't establish connection to the webapi, so we'll use cached data instead
            fields = await localStorage.GetItemAsync<List<Field>>("FieldList");
        }
    }

    private void navigateToEditField(Field field)
    {
        FieldService.SetField(field);
        NavigationManager.NavigateTo("/editField");
    }

    private string CalculateBattery(int left, int max, int receiverTimeInterval)
    {
        double result = (double)left / (double)max * 100;
        double daysLeft = left / (24 / (receiverTimeInterval / 3600));

        return result.ToString("0.0") + "% (~" + daysLeft.ToString("0") + " days left)";
    }

    private void NavigateToChartPage(Field field)
    {
        FieldService.SetField(field);
        NavigationManager.NavigateTo("/chart");
    }
}
