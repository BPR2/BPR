@using BPR_RazorLibrary.Models
@using BPR_RazorLibrary.Services.Fields
@using BPR_RazorLibrary.Services.Receivers
@using BPR_RazorLibrary.Services.Sensor
@using BPR_RazorLibrary.Services.Users
@using System.Text.Json
@using Microsoft.JSInterop

@inject IReceiverService ReceiverService
@inject ISensorService SensorService
@inject IJSRuntime JSRuntime

<style>


    .form-label-group, .form-label-group label {
        margin-top: 0.1rem !important;
    }

    .fa-solid {
        color: white;
        top: 3px;
    }

    tbody tr:nth-child(odd) {
        background-color: #eee;
    }

    tbody tr:nth-child(even) {
        background-color: #D3D3D3;
    }

    table {
        margin: 0;
        margin-top: 15px;
        padding: 0;
        width: 100%;
        table-layout: fixed;
    }

        table th,
        table td {
            padding: .625em;
            text-align: center;
            border: none;
        }

        table th {
            font-size: .9em;
            letter-spacing: .1em;
            text-transform: uppercase;
        }

    @@media screen and (min-width: 681px) {
        .smallTable {
            display: none;
        }
    }

    @@media screen and (max-width: 680px) {
        table {
            border: 0;
        }

            table caption {
                font-size: 1.3em;
            }

            table thead {
                border: none;
                clip: rect(0 0 0 0);
                height: 1px;
                margin: -1px;
                overflow: hidden;
                padding: 0;
                position: absolute;
                width: 1px;
            }

            table tr {
                border-bottom: 3px solid #ddd;
                display: block;
                margin-bottom: .625em;
            }

            table td {
                border-bottom: 1px solid #ddd;
                display: block;
                font-size: .8em;
                text-align: right;
            }

                table td::before {
                    content: attr(data-label);
                    float: left;
                    font-weight: bold;
                    text-transform: uppercase;
                    letter-spacing: .03em;
                }

                table td:last-child {
                    border-bottom: 0;
                }

        .bigTable {
            display: none;
        }
    }

    .expandedRow {
        border-top: 0;
        border-bottom: 1px solid #ddd;
    }

    .card {
        margin-top: 10px;
    }

    .card {
        border-radius: 20px !important;
    }

    .fa-solid {
        margin-top: 10px;
    }

</style>


@if (receivers.Any())
{
    <div class="smallTable">
        <table class="table">
            <tbody>
                @foreach (var receiver in receivers.OrderBy(r => r.SerialNumber))
                {
                    <tr @onclick="() => TrClickedAtIndex(receiver, receivers)">
                        <td data-label="Serial Number">@receiver.SerialNumber</td>
                        <td data-label="Assigned User">@receiver.Description</td>
                        @if (@receiver.ReceiverLatestData != null)
                        {
                            <td data-label="Last Update">@receiver.ReceiverLatestData.Timestamp</td>
                        }
                        else
                        {
                            <td data-label="Last Update">No update</td>
                        }


                        @if (receiver.IsRowExpanded)
                        {
                            foreach (var sensor in receiver.Sensors)
                            {
                                <td data-label="@sensor.TagNumber">
                                    <div class="form-label-group input-group form-group">
                                        <span class="input-group-text" style="background:red!important; float: left;" @onclick=" () => UnassignSensor(sensor.TagNumber)"><i class="fa-solid fa-circle-xmark"></i> </span>
                                    </div>
                                </td>
                            }
                            @if (!receiver.Description.Equals("Not Assigned"))
                            {
                                <td data-label="Unassign Receiver">
                                    <button type="button" style="width:100px; float: none; font-size: 14px;" class="btn btn-danger" @onclick=" () => UnassignReceiverFromUser(receiver)">Unassign</button>
                                </td>
                            }
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <div class="bigTable">
        <table class="table">
            <thead>
                <tr>
                    <th>Serial Number</th>
                    <th>Assigned User</th>
                    <th>Last Update</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var receiver in receivers.OrderBy(r => r.SerialNumber))
                {
                    <tr @onclick="() => TrClickedAtIndex(receiver, receivers)">
                        <td data-label="Serial Number">@receiver.SerialNumber</td>
                        <td data-label="Assigned User">@receiver.Description</td>
                        @if (@receiver.ReceiverLatestData != null)
                        {
                            <td data-label="Last Update">@receiver.ReceiverLatestData.Timestamp</td>
                        }
                        else
                        {
                            <td data-label="Last Update">No update</td>
                        }
                    </tr>
                    @if (receiver.IsRowExpanded)
                    {
                        int i = 1;
                        foreach (var item in receiver.Sensors)
                        {
                            <tr style="display: none"></tr>
                            <tr class="expandedRow">
                                <td style="font-weight: bold; font-size: .85em; letter-spacing: .1em; text-transform: uppercase;">
                                    Sensor @i:
                                </td>
                                <td>@item.TagNumber</td>
                                <td>
                                    <div class="form-label-group input-group form-group">
                                        <span class="input-group-text" style="background:red!important; float: right;" @onclick=" () => UnassignSensor(item.TagNumber)"><i class="fa-solid fa-circle-xmark"></i> </span>
                                    </div>
                                </td>
                            </tr>
                            i++;
                        }

                        @if (!receiver.Description.Equals("Not Assigned"))
                        {
                            <tr style="display: none"></tr>
                            <tr class="expandedRow">
                                <td>
                                    <button type="button" style="width:100px; float: none; font-size: 14px;" class="btn btn-danger" @onclick=" () => UnassignReceiverFromUser(receiver)">Unassign Receiver</button>
                                </td>
                                <td></td>
                                <td></td>
                            </tr>
                        }
                    }
                }
            </tbody>
        </table>
    </div>
}
else
{
    <div class="card">
        <div class="card-body">
            <div class="text-center">
                <div class="spinner-border col-md-12" style="width: 2rem; height: 2rem;" role="status"><i class="fa-solid fa-wheat-awn"></i></div>
            </div>
        </div>
    </div>
}


@code {

    private List<Receiver> receivers = new List<Receiver>();

    protected override async Task OnInitializedAsync()
    {
        receivers = await ReceiverService.GetAllReceiversList();
    }

    public async Task TrClickedAtIndex(Receiver receiver, List<Receiver> receivers)
    {
        foreach (var item in receivers)
        {
            if (item != receiver)
            {
                item.IsRowExpanded = false;
            }
        }

        receiver.IsRowExpanded = !receiver.IsRowExpanded;
        StateHasChanged();
    }

    public async Task UnassignSensor(string TagNumber)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to unassign sensor '{TagNumber}'?"))
            return;

        await SensorService.UnassignSensor(TagNumber);

        await OnInitializedAsync();
    }

    public async Task UnassignReceiverFromUser(Receiver receiver)
    {
        if (receiver.FieldId == 0)
        {
            if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to unassign receiver '{receiver.SerialNumber}' from the user?"))
                return;

            await ReceiverService.UnassignReceiverFromUser(receiver.SerialNumber);
 
            await OnInitializedAsync();
        }
        else
        {
            await JSRuntime.InvokeAsync<bool>("confirm", "This receiver is assigned to a field, so it can't be unassigned!");
        }
    }
}

