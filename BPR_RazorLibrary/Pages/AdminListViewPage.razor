@using BPR_RazorLibrary.Models
@using BPR_RazorLibrary.Services.Receivers
@using BPR_RazorLibrary.Services.Users
@using System.Text.Json

@inject IUserService UserService
@inject IReceiverService ReceiverService

<style>
    tbody tr:nth-child(odd) {
        background-color: #eee;
    }

    tbody tr:nth-child(even) {
        background-color: #fff;
    }

    table {
        margin: 0;
        margin-top: 15px;
        padding: 0;
        width: 100%;
        table-layout: fixed;
    }

        table th,
        table td {
            padding: .625em;
            text-align: center;
            border: none;
        }

        table th {
            font-size: .9em;
            letter-spacing: .1em;
            text-transform: uppercase;
        }

    @@media screen and (min-width: 601px) {
        .smallTable {
            display: none;
        }
    }

    @@media screen and (max-width: 600px) {
        table {
            border: 0;
        }

            table caption {
                font-size: 1.3em;
            }

            table thead {
                border: none;
                clip: rect(0 0 0 0);
                height: 1px;
                margin: -1px;
                overflow: hidden;
                padding: 0;
                position: absolute;
                width: 1px;
            }

            table tr {
                border-bottom: 3px solid #ddd;
                display: block;
                margin-bottom: .625em;
            }

            table td {
                border-bottom: 1px solid #ddd;
                display: block;
                font-size: .8em;
                text-align: right;
            }

                table td::before {
                    content: attr(data-label);
                    float: left;
                    font-weight: bold;
                    text-transform: uppercase;
                }

                table td:last-child {
                    border-bottom: 0;
                }

        .bigTable {
            display: none;
        }
    }

    .expandedRow {
        border-top: 0;
    }

</style>


<div class="smallTable">
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Full Name</th>
                <th>Email</th>
                <th>Contact</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in allUsers.OrderBy(a => a.Username))
            {
                <tr @onclick="() => TrClickedAtIndex((int) user.AccountId, user, allUsers)">
                    <td data-label="Username">@user.Username</td>
                    <td data-label="Full Name">@user.FullName</td>
                    <td data-label="Email">@user.Email</td>

                    @if (user.IsRowExpanded)
                    {
                        <td data-label="Contact">@user.Contact</td>
                        <td data-label="Address">@user.Address</td>
                        @for (int i = 1; i <= receivers.Count; i++)
                        {
                            <td data-label="Receiver @i">@receivers[i-1].SerialNumber</td>
                        }
                    }
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="bigTable">
    <table class="table">
        <thead>
            <tr>
                <th>Username</th>
                <th>Full Name</th>
                <th>Contact</th>
                <th>Email</th>
                <th>Address</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in allUsers.OrderBy(a => a.Username))
            {
                <tr @onclick="() => TrClickedAtIndex((int) user.AccountId, user, allUsers)">
                    <td data-label="Username">@user.Username</td>
                    <td data-label="Full Name">@user.FullName</td>
                    <td data-label="Email">@user.Email</td>
                    <td data-label="Contact">@user.Contact</td>
                    <td data-label="Address">@user.Address</td>
                </tr>
                @if (user.IsRowExpanded)
                {
                    @for (int i = 1; i <= receivers.Count; i++)
                    {
                        <tr style="display: none"></tr>
                        <tr class="expandedRow">
                            <td style=" font-weight:bold;">Receiver @i:</td>
                            <td>@receivers[i-1].SerialNumber</td>
                            <td></td>
                            <td></td>
                            <td></td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
</div>



@code {
    private List<User> allUsers = new List<User>();
    private List<Receiver> receivers = new List<Receiver>();

    protected override async Task OnInitializedAsync()
    {
        allUsers = await UserService.GetAllUsers();
    }

    public async Task TrClickedAtIndex(int id, User user, List<User> users)
    {
        receivers = await ReceiverService.GetReceiversByUserID(id);

        foreach (var item in users)
        {
            if (item != user)
            {
                item.IsRowExpanded = false;
            }
        }

        user.IsRowExpanded = !user.IsRowExpanded;
        StateHasChanged();
    }
}
