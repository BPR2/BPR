@page "/adminUnitManage"

@using BPR_RazorLibrary.Services
@using BPR_RazorLibrary.Services.Receivers
@using BPR_RazorLibrary.Services.Sensor
@using BPR_RazorLibrary.Services.Users
@using BPR_RazorLibrary.Models
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Smart.Blazor

@inject IUserService UserService
@inject IReceiverService _ReceiverService
@inject ISensorService _SensorService
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .card {
        margin-top: 10px;
        padding: 10px !important;
        border-radius: 10px;
        width: -webkit-fill-available;
    }

    .form-label-group, .form-label-group label {
        margin-top: 1.5rem;
    }

        .form-label-group .oi {
            margin-bottom: 0.5rem;
        }

    .tab {
        margin-top: 1.5rem;
        overflow: hidden;
        background-color: #f1f1f1;
        border-radius: 30px;
    }

        .tab button {
            background-color: inherit;
            border: none;
            outline: none;
            cursor: pointer;
            padding: 14px 16px;
            transition: 0.3s;
            font-size: 17px;
            width: 24.5%;
            font-weight: 600;
        }

            .tab button:hover {
                background-color: #ddd;
            }

    .container {
        justify-content: center !important;
        max-width: 700px !important;
        max-height: 550px !important;
        margin-top: 1.5rem !important;
    }

    .input-group-text {
        background: #1565a2 !important;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        justify-content: center;
        padding: 20px !important;
    }

    input:focus, .smart-drop-down-list.smart-element:focus {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .oi, .fa-solid {
        color: white;
        position: absolute;
        top: 13px;
    }

    @@media screen and (max-width: 680px) {
        .rightButtons {
            float: right;
        }

        .tab button {
            width: 50%;
        }
    }

   .smart-drop-down-list.smart-element {
        padding: 0 !important;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
    }

</style>


<div class="tabcontent">
    <div class="tab">

        <button style="@(tab3?"background-color: #7fc469;color:white;":"")" @onclick="(x=>DisplayTab(3))">Users</button>

        <button class="rightButtons" style="@(tab4?"background-color: #7fc469;color:white;":"")" @onclick="(x=>DisplayTab(4))">Receivers</button>

        <button style="@(tab1?"background-color: #7fc469;color:white;":"")" @onclick="(x=>DisplayTab(1))">Assign Receiver</button>

        <button class="rightButtons" style="@(tab2?"background-color: #7fc469;color:white;":"")" @onclick="(x=>DisplayTab(2))">Add Sensor</button>
    </div>

    @if (tab1 || tab2)
    {
        <EditForm Model="@newReceiver" OnValidSubmit="@Assign">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="card">
                <div class="card-body">
                    @if (tab1)
                    {
                        <div class="form-register">
                            <div class="form-label-group">
                                <div class="form-label-group input-group form-group">
                                    <span class="input-group-text"><i class="fa-solid fa-qrcode"></i> </span>
                                    <input type="text" class="form-control" placeholder="Serial Number" @bind-value="serialNumber" required />
                                </div>

                                <div class="form-label-group input-group form-group">
                                    <span class="input-group-text"><i class="fa-solid fa-user"></i></span>
                                    <DropDownList class="form-control" DataSource="@userNames" Filterable="true" OnItemClick="OnUserSelected" required />
                                </div>

                                <div class="form-label-group input-group form-group">
                                    <span title="Max Transmission" class="input-group-text"><i class="fa-solid fa-battery-full"></i> </span>
                                    <input min="0" type="number" class="form-control" placeholder="Receiver's Max Transsmissons" @bind-value="maxTransmission" required />
                                </div>

                                <div class="form-label-group input-group form-group width">
                                    <span title="Left Transmisson" class="input-group-text"><i class="fa-solid fa-battery-half"></i> </span>
                                    <input min="0" type="number" class="form-control" placeholder="Receiver's Left Transsmissons" @bind-value="leftTransmission" required />
                                </div>

                            </div>
                        </div>
                    }

                    @if (tab2)
                    {
                        <div class="form-register">

                            <div class="form-label-group">

                                <div class="form-label-group input-group form-group">
                                    <span class="input-group-text"><i class="fa-solid fa-tag"></i></span>
                                    <input type="text" class="form-control" placeholder="Sensor Tag Number" @bind-value="tagNumber" required />
                                </div>

                                <div class="form-label-group input-group form-group">
                                    <span class="input-group-text"><i class="fa-solid fa-qrcode"></i></span>
                                    <DropDownList class="form-control" DataSource="@serialNumbers" Filterable="true" OnItemClick="OnReceiverSelected" />
                                </div>
                            </div>

                        </div>
                    }

                    <div class="text-center">
                        <button class="btn btn-outline-success btn-block text-uppercase" type="submit" style="margin-top: 1rem; margin-bottom: .5rem; ">Assign</button>
                    </div>

                    @if (!string.IsNullOrWhiteSpace(message) || !string.IsNullOrWhiteSpace(message1))
                    {
                        @if (!string.IsNullOrWhiteSpace(message))
                        {
                            <div class="alert alert-danger">
                                @message
                            </div>
                        }
                        else
                        {
                            <div class="alert alert-success">
                                @message1
                            </div>
                        }
                    }
                </div>
            </div>
        </EditForm>
    }
</div>

@if (tab3)
{
    <AdminUserListViewPage />
}
@if (tab4)
{
    <AdminReceiverListViewPage />
}




@code {
    //Assign receiver tab
    private Receiver newReceiver = new Receiver();
    private string serialNumber = String.Empty;
    private string username = String.Empty;
    List<User> users = new List<User>();
    List<string> userNames = new List<string>();

    //Add new sensor tab
    private Sensor newSensor = new Sensor();
    private string tagNumber = String.Empty;
    private string sensorSerialNumber = String.Empty;
    List<Receiver> receivers = new List<Receiver>();
    List<string> serialNumbers = new List<string>();

    private string message = String.Empty;
    private string message1 = String.Empty;

    private bool tab1 = false;
    private bool tab2 = false;
    private bool tab3 = true;
    private bool tab4 = false;

    private int maxTransmission = 0;
    private int leftTransmission = 0;

    protected override async Task OnInitializedAsync()
    {
        users = await UserService.GetAllUsers();
        receivers = await _ReceiverService.GetAllReceivers();

        foreach (var user in users)
        {
            userNames.Add(user.Username);
        }

        foreach (var receiver in receivers)
        {
            serialNumbers.Add(receiver.SerialNumber);
        }
    }

    private async Task Assign()
    {
        if (tab1)
        { await AssignNewReceiver(); }
        else if (tab2)
        { await AddNewSensor(); }
    }

    private async Task AssignNewReceiver()
    {
        if (maxTransmission >= leftTransmission)
        {
            string responese = await _ReceiverService.AssignReceiver(serialNumber, username, maxTransmission, leftTransmission);
            if (responese.Equals("13"))
            {
                string response1 = await _ReceiverService.UpdateReceiverToUser(serialNumber, username);

                if (response1.Equals("8"))
                {
                    message = "Receiver is already assigned!";
                    message1 = String.Empty;
                }
                else if (response1.Equals("7"))
                {
                    message1 = "Receiver successfully reassigned!";
                    message = String.Empty;
                }
            }
            else if (responese.Equals("10") || username.Equals(String.Empty))
            {
                message = "Provided User doesn't exist!";
                message1 = String.Empty;
            }
            else
            {
                message = String.Empty;
                message1 = "Receiver successfully added!";
                serialNumber = String.Empty;
                username = String.Empty;
                maxTransmission = 0;
                leftTransmission = 0;
            }
        }
        else
        {
            message = "Max Transmissions has to be >= Left Transmission!";
            message1 = String.Empty;
        }
        receivers.Clear();
        receivers = await _ReceiverService.GetAllReceivers();
    }

    private async Task AddNewSensor()
    {
        string responese = await _SensorService.AddNewSensor(tagNumber, sensorSerialNumber);
        if (responese.Equals("13"))
        {
            string response1 = await _SensorService.UpdateSensor(tagNumber, sensorSerialNumber);
            if (response1.Equals("8"))
            {
                message = "Tag Number is already assigned!";
                message1 = String.Empty;
            }
            else if (response1.Equals("7"))
            {
                message1 = "Sensor successfully assigned!";
                message = String.Empty;
            }
        }
        else if (responese.Equals("10"))
        {
            message = "Provided Receiver doesn't exist!";
            message1 = String.Empty;
        }
        else
        {
            message = String.Empty;
            message1 = "Sensor successfully added!";
            tagNumber = String.Empty;
            sensorSerialNumber = String.Empty;
        }
    }

    private void DisplayTab(int TabNumber)
    {
        switch (TabNumber)
        {
            case 1:
                this.tab1 = true;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = false;
                message = String.Empty;
                message1 = String.Empty;
                break;
            case 2:
                this.tab1 = false;
                this.tab2 = true;
                this.tab3 = false;
                this.tab4 = false;
                message = String.Empty;
                message1 = String.Empty;
                break;
            case 3:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = true;
                this.tab4 = false;
                message = String.Empty;
                message1 = String.Empty;
                break;
            case 4:
                this.tab1 = false;
                this.tab2 = false;
                this.tab3 = false;
                this.tab4 = true;
                message = String.Empty;
                message1 = String.Empty;
                break;
        }
    }

    private void OnUserSelected(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        username = detail.Label;
    }

    private void OnReceiverSelected(Event ev)
    {
        DropDownListItemClickEventDetail detail = ev["Detail"];
        sensorSerialNumber = detail.Label;
    }

}
