@page "/chart"

@using BPR_RazorLibrary.Services.Charts;
@using BPR_RazorLibrary.Services.Fields;
@using BPR_RazorLibrary.Models;
@using BPR_RazorLibrary.Services.Receivers
@using BPR_RazorLibrary.Services.Users;
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Radzen
@using Radzen.Blazor

@inject IJSRuntime JS
@inject IChartService ChartService
@inject IFieldService FieldService
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .container, .card {
        margin-top: 10px;
    }

    .card, RadzenCard {
        border-radius: 20px !important;
    }

    .input-group {
        width: unset !important;
    }

    .alert {
        margin-top: 5px !important;
        width: fit-content;
    }

    .btn-outline-primary {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .form-label-group, .searchBtn {
        margin: 5px;
        min-width: 200px;
    }

    .rz-chart {
        height: 400px !important;
    }

    @@media (max-width: 500px) {
        .btn-outline-primary {
            width: -webkit-fill-available;
        }
    }
</style>

<div class="container">
    <div class="row">
        <div class="col-sm-12 my-5">
            <RadzenCard Class="w-100 mb-4" Style=" align-items: center; gap: 0.5rem">
                <div class="row">
                    <div class="col form-label-group input-group">
                        <span class="input-group-text">From</span>
                        <input id="startDate" class="form-control" type="date" @bind-value="from" />
                    </div>
                    <div class="col form-label-group  input-group">
                        <span class="input-group-text">To</span>
                        <input id="startDate" class="form-control" type="date" @bind-value="to" />
                    </div>
                    <div class=" col searchBtn">
                        <button class="btn btn-outline-primary" @onclick="search"><i class="fa-solid fa-magnifying-glass"></i></button>
                    </div>
                </div>
                @if (!string.IsNullOrWhiteSpace(message))
                {
                    <div class="alert alert-danger">
                        @message
                    </div>
                }
            </RadzenCard>

            <RadzenCard Class="w-100 mb-4" Style=" align-items: center; gap: 0.5rem">
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" Class="my-4">
                    Temperature °C
                </RadzenText>
                <RadzenChart>

                    @foreach (var s in field.Receiver.Sensors)
                    {
                        <RadzenLineSeries Data="@dataItems(true, s.TagNumber)" CategoryProperty="Date" Title="@s.TagNumber" ValueProperty="Mesurement">
                            <TooltipTemplate Context="data">
                                <div>
                                    @data.Date.ToString("dd/MM/yyyy HH:mm")
                                </div>
                                <div>
                                    <strong>@s.TagNumber:</strong> @data.Mesurement °C
                                </div>
                            </TooltipTemplate>
                        </RadzenLineSeries>
                    }
                    <RadzenLegend Position="LegendPosition.Top" />
                    <RadzenCategoryAxis Formatter="@FormatAsWeekDay" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenCard>

            <RadzenCard Class="w-100 mb-4" Style=" align-items: center; gap: 0.5rem">
                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H6" Class="my-4">
                    Humidity %
                </RadzenText>
                <RadzenChart>

                    @foreach (var s in field.Receiver.Sensors)
                    {
                        <RadzenLineSeries Data="@dataItems(false, s.TagNumber)" CategoryProperty="Date" Title="@s.TagNumber" ValueProperty="Mesurement">
                            <TooltipTemplate Context="data">
                                <div>
                                    @data.Date.ToString("dd/MM/yyyy HH:mm")
                                </div>
                                <div>
                                    <strong>@s.TagNumber:</strong> @data.Mesurement %
                                </div>
                            </TooltipTemplate>
                        </RadzenLineSeries>
                    }
                    <RadzenLegend Position="LegendPosition.Top" />
                    <RadzenCategoryAxis Formatter="@FormatAsWeekDay" />
                    <RadzenValueAxis>
                        <RadzenGridLines Visible="true" />
                    </RadzenValueAxis>
                </RadzenChart>
            </RadzenCard>

        </div>
    </div>
</div>

@code {
    private List<ChartData> datas = new List<ChartData>();
    private Field? field = new Field();
    private List<SensorMeasurement> sensorMeasurements = new List<SensorMeasurement>();
    private DateTime from = new DateTime();
    private DateTime to = new DateTime();
    private string message = string.Empty;
    bool showDataLabels = false;

    protected override async Task OnInitializedAsync()
    {
        to = DateTime.Now;
        from = DateTime.Now.AddDays(-7);
        field = FieldService.GetField();

        try
        {
            datas = await ChartService.GetAllChartDataByFieldId(field.Id, from, to);
        }
        catch (Exception e)
        {
            //we are here if we can't establish connection to the webapi, so we'll use cached data instead
            datas = await localStorage.GetItemAsync<List<ChartData>>("Field" + field.Id);
        }
    }

    private async Task search()
    {
        var diff = (to - from).Days;
        if (diff > 7)
        {
            message = "Difference between From and To date can't be more than 7 days!";
        }
        else if (from > to)
        {
            message = "From date must be earlier than To date!";
        }
        else
        {
            message = string.Empty;
            datas = await ChartService.GetAllChartDataByFieldId(field.Id, from, to);
        }
    }

    class DataItem
    {
        public DateTime Date { get; set; }
        public double Mesurement { get; set; }
    }

    private List<DataItem> dataItems(bool isTemperature, string tagNumber)
    {
        var measurements = new List<DataItem>();
        foreach (var d in datas)
        {
            var dataItem = new DataItem();
            foreach (var m in d.Measurements)
            {
                dataItem.Date = d.Date;
                if (isTemperature)
                {
                    if (tagNumber.Equals(m.TagNumber))
                        dataItem.Mesurement = Math.Floor(m.Temperature * 100) / 100;
                }
                else
                {
                    if (tagNumber.Equals(m.TagNumber))
                        dataItem.Mesurement = Math.Floor(m.Humidity * 100) / 100;
                }
            }
            measurements.Add(dataItem);
        }
        return measurements;
    }

    string FormatAsWeekDay(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("dd/MM");
        }

        return string.Empty;
    }
}