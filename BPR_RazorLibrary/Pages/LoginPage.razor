@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using BPR_RazorLibrary.Services.Users;
@using BPR_RazorLibrary.Models;
@using System.Security.Claims
@using BPR_RazorLibrary.Models.Authentication
@using Microsoft.AspNetCore.Components.Forms

@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>

    .Login {
        max-width: 600px;
        max-height: 550px;
        margin-top: 100px;
    }

    .card {
        padding: 10px;
        border-radius: 10px;
        width: 800px;
    }

    .card-img {
        text-align: center;
    }

    .form-label-group, .form-label-group label, #checkBox {
        margin-top: 1rem;
    }

        .form-label-group button {
            width: -webkit-fill-available;
            margin-top: 1rem;
        }

        .form-label-group .oi {
            margin-bottom: 1.1rem;
        }

    .alert {
        margin-top: 1rem;
    }

    .input-group-text {
        background: #1565a2 !important;
        border-top-right-radius: 0;
        border-bottom-right-radius: 0;
        justify-content: center;
        padding: 20px !important;
    }

    .interact-container {
        padding: 5px;
        display: flex;
        justify-content: center;
        align-items: center;
        color: inherit;
        text-decoration: none;
    }

    .interact-child {
        cursor: pointer;
    }

    input:focus {
        outline: 0 0 0 0 !important;
        box-shadow: 0 0 0 0 !important;
    }

    .fa-solid {
        color: white;
        position: absolute;
        top: 11px;
    }

    @@media (max-width: 400px) {
    }

</style>

<div class="container d-flex justify-content-center">
    <div class="card Login">
        <div class="card-body">
            <div class="card-img">
                <img class="img-fluid" alt="Responsive image" src="https://www.fasterholt.dk/images/fasterholt-logo.jpg" />
            </div>
            <EditForm Model="@user" OnValidSubmit="@PerformLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-label-group input-group form-group">
                    <span class="input-group-text"><i class="fa-solid fa-user"></i></span>
                    <InputText class="form-control" @bind-Value="username" placeholder="Username" required />
                </div>

                <div class="form-label-group input-group form-group">
                    <span class="input-group-text"><i class="fa-solid fa-lock"></i></span>
                    <InputText id="txtPass" class="form-control" type="password" @bind-Value="password" placeholder="Password" required />
                    <a class="interact-container" onclick="showPassword()">
                        <i class="interact-child far fa-eye"></i>
                    </a>
                </div>


                <div class="form-check" id="checkBox">
                    <input class="form-check-input" type="checkbox" @bind-value="rememberMe">
                    <label class="form-check-label">
                        Remember me
                    </label>
                </div>
                <div class="form-label-group">
                    <button class="btn btn-outline-success btn-block text-uppercase" type="submit" @onclick="PerformLogin">Log in</button>
                </div>
            </EditForm>
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
        </div>
    </div>

</div>

@code {
    private User user = new User();
    private string username = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool rememberMe;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }
    private string passwordType;
    private bool showPassword;

    protected override async Task OnInitializedAsync()
    {
        username = await localStorage.GetItemAsync<string>("username");
        password = await localStorage.GetItemAsync<string>("password");
        passwordType = "password";
        showPassword = false;
        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password))
        {
            await PerformLogin();
        }
    }

    public async Task PerformLogin()
    {
        errorMessage = "";
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);

            if ((await AuthStat).User == null)
            {
                return;
            }

            var userPrincipal = (await AuthStat).User;

            if (rememberMe)
            {
                await localStorage.SetItemAsync("username", username);
                await localStorage.SetItemAsync("password", password);
            }

            await InvokeAsync(StateHasChanged);
            if (username.Equals("admin"))
            {
                NavigationManager.NavigateTo("/adminUnitManage");
            }
            else
            {
                NavigationManager.NavigateTo("/fields");
            }

        }
        catch (Exception e)
        {
            errorMessage = "No user found with provided email and password";
        }
    }

    public async Task OnShowPasswordChanged()
    {
        if (!showPassword)
        {
            passwordType = "text";
        }
        else
        {
            passwordType = "password";
        }
    }
}
