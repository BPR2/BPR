@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using BPR_RazorLibrary.Services.Users;
@using BPR_RazorLibrary.Models;
@using System.Security.Claims
@using BPR_RazorLibrary.Models.Authentication

@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<style>
    .Login {
        max-width: 400px;
        max-height: 550px;
        margin: 20px;
    }

    .card {
        padding: 10px;
        border-radius: 10px;
    }


    .form-label-group, .form-label-group label, #checkBox {
        margin-top: 1rem;
    }

        .form-label-group button {
            width: -webkit-fill-available;
            margin-top: 1rem;
        }

        .form-label-group .oi {
            margin-bottom: 1.1rem;
        }

    .alert {
        margin-top: 1rem;
    }

</style>

<div class="container d-flex justify-content-center">
    <div class="card Login">
        <div class="card-body">
            <div class="row">
                <img class="img-fluid" alt="Responsive image" src="https://www.fasterholt.dk/images/fasterholt-logo.jpg" />
                <form class="form-login">
                    <div class="form-label-group">
                        <label class="oi oi-person">  Email</label>
                        <input type="text" class="form-control" placeholder="Username" @bind-value="username" required>
                    </div>

                    <div class="form-label-group">
                        <label class="oi oi-lock-locked"> Password</label>
                        <input type="password" class="form-control" placeholder="Password" @bind-value="password" required>
                    </div>

                    <div class="form-check" id="checkBox">
                        <input class="form-check-input" type="checkbox" @bind-value="rememberMe">
                        <label class="form-check-label">
                            Remember me
                        </label>
                    </div>
                </form>
                <div class="form-label-group">
                    <button class="btn btn-outline-success btn-block text-uppercase" type="submit" @onclick="PerformLogin">Log in</button>
                </div>                
            </div>
            @if (!string.IsNullOrWhiteSpace(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }
        </div>
    </div>

</div>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string errorMessage = string.Empty;
    private bool rememberMe;
    [CascadingParameter] protected Task<AuthenticationState> AuthStat { get; set; }

    protected override async Task OnInitializedAsync()
    {
        username = await localStorage.GetItemAsync<string>("username");
        password = await localStorage.GetItemAsync<string>("password");
        if (!string.IsNullOrEmpty(username) && !string.IsNullOrEmpty(password)) 
        {
            await PerformLogin();
        }
    }

    public async Task PerformLogin()
    {
        errorMessage = "";        
        try
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).ValidateLogin(username, password);

            if ((await AuthStat).User == null)
            {
                return;
            }

            var userPrincipal = (await AuthStat).User;

            if (rememberMe)
            {
                await localStorage.SetItemAsync("username", username);
                await localStorage.SetItemAsync("password", password);
            }

            //UserService.SetUserId(int.Parse(userPrincipal.FindFirst(c => c.Type == ClaimTypes.SerialNumber)?.Value));
            username = "";
            password = "";
            await InvokeAsync(StateHasChanged);
            NavigationManager.NavigateTo("/adminUnitManage");
        }
        catch (Exception e)
        {
            errorMessage = "No user found with provided email and password";
        }
    }

}
